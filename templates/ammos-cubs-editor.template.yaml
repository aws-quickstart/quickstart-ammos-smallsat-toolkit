Parameters:
  ProjectName:
    Description: Name of your project
    Type: String
  ConfigBucketName:
    Description: Name of the S3 bucket used to store project-specific configuration files.
    Type: String
  FQDN:
    Description: Fully Qualified Domain Name to use for project resources root.
    Type: String
  PrivateSubnetIds:
    Description: Private Subnet IDs for deploying application server Instances
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC ID for deploying project resources
    Type: AWS::EC2::VPC::Id
  InstanceType:
    Description: Instance type to be used for AIT Server instances; see deployment guide for recommendations
    Type: String
    # TODO: Prescribe allowed Instance Types
    # AllowedValues:
    # - ""
  SshKeyName:
    Description: Name of created SSH Key for instance access - must use SSM sessions if no key supplied
    Type: AWS::EC2::KeyPair::KeyName
  SessionTimeout:
    Description: The maximum duration of the authentication session, in seconds.
    Type: Number
    Default: 604800 # One day
    MinValue: 60
    MaxValue: 604800
  # TODO: Enforce AllowedValues
  RolePath:
    Description: Will be attached to all created IAM Roles to satisfy security requirements.
    Type: String
    Default: ''
  # TODO: Enforce AllowedValues
  PermissionsBoundaryArn:
    Description: Will be attached to all created IAM Roles to satisfy security requirements.
    Type: String
    Default: ''

Metadata:
  QuickStartDocumentation:
    EntrypointName: 'Provision the AIT Editor resources'
    OptionalParameters:
      - InstanceType
      - SshKeyName
      - SessionTimeout
      - RolePath
      - PermissionsBoundaryArn
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - PrivateSubnetIds
          - SessionTimeout
      - Label:
          default: Instance Configuration
        Parameters:
          - InstanceType
          - SshKeyName
      - Label:
          default: Project Configuration
        Parameters:
          - ProjectName
          - ConfigBucketName
          - FQDN
      - Label:
          default: IAM Configuration
        Parameters:
          - RolePath
          - PermissionsBoundaryArn
    ParameterLabels:
      ProjectName:
        default: Project Name
      PermissionsBoundaryArn:
        default: PermissionsBoundary Policy ARN
      RolePath:
        default: IAM Role Path
      ConfigBucketName:
        default: Config Bucket Name
      FQDN:
        default: FQDN
      PrivateSubnetIds:
        default: Private Subnet IDs
      VpcId:
        default: VPC ID
      InstanceType:
        default: Instance Type
      SshKeyName:
        default: SSH KeyPair Name
      SessionTimeout:
        default: Auth Session Timeout

Mappings:
  AWSAMIRegionMap:
    us-east-1:
      RHEL76HVM: example
    us-east-2:
      RHEL76HVM: example
    us-west-1:
      RHEL76HVM: example
    us-west-2:
      RHEL76HVM: example

Conditions:
  SshEnabled: !Not [!Equals ['', !Ref SshKeyName]]
  IsGovCloud: !Not [!Equals ['aws', !Ref AWS::Partition]]
  RolePathProvided: !Not [!Equals ['', !Ref RolePath]]
  PermissionsBoundaryProvided: !Not [!Equals ['', !Ref PermissionsBoundaryArn]]

Resources:
  AitEditorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage connections to ammos-ait-editor AIT
        Editor
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: '${ProjectName}-AlbSecurityGroupId'
      VpcId: !Ref VpcId

  EditorTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      Targets:
        - Id: !Ref Instance
          Port: 80
      VpcId: !Ref VpcId
  EditorListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            ClientId: !ImportValue
              Fn::Sub: ${ProjectName}-CognitoClientId
            ClientSecret: !ImportValue
              Fn::Sub: ${ProjectName}-CognitoClientSecret
            Issuer: !ImportValue
              Fn::Sub: ${ProjectName}-CognitoProviderUrl
            UserInfoEndpoint:
              Fn::Join:
                - ''
                - - 'https://'
                  - !ImportValue
                    Fn::Sub: ${ProjectName}-CognitoDomainName
                  - !If [IsGovCloud, '.auth-fips.', '.auth.']
                  - !Ref AWS::Region
                  - '.amazoncognito.com/oauth2/userInfo'
            AuthorizationEndpoint:
              Fn::Join:
                - ''
                - - 'https://'
                  - !ImportValue
                    Fn::Sub: ${ProjectName}-CognitoDomainName
                  - !If [IsGovCloud, '.auth-fips.', '.auth.']
                  - !Ref AWS::Region
                  - '.amazoncognito.com/oauth2/authorize'
            TokenEndpoint:
              Fn::Join:
                - ''
                - - 'https://'
                  - !ImportValue
                    Fn::Sub: ${ProjectName}-CognitoDomainName
                  - !If [IsGovCloud, '.auth-fips.', '.auth.']
                  - !Ref AWS::Region
                  - '.amazoncognito.com/oauth2/token'
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            SessionTimeout: !Ref SessionTimeout
        - Type: forward
          Order: 2
          TargetGroupArn:
            Ref: EditorTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'editor.${FQDN}'
      ListenerArn: !ImportValue
        Fn::Sub: '${ProjectName}-HttpsListenerArn'
      Priority: 125
  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT1H
    DependsOn:
      - InstanceRole
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/EditorServer'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 32
      IamInstanceProfile: !Ref InstanceOneInstanceProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - RHEL76HVM
      InstanceType: !Ref InstanceType
      KeyName: !If [SshEnabled, !Ref SshKeyName, !Ref AWS::NoValue]
      SecurityGroupIds:
        - !GetAtt AitEditorSecurityGroup.GroupId
      SubnetId: !Select [0, !Ref PrivateSubnetIds]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          function exitTrap(){
            exitCode=$?
            /opt/aws/bin/cfn-signal \
              --stack ${AWS::StackName} \
              --resource Instance \
              --region ${AWS::Region} -e $exitCode || echo 'Failed to send Cloudformation Signal'
          }
          trap exitTrap EXIT
          CONFIG_BUCKET_NAME=${ConfigBucketName}

          yum install -y -q python3 wget unzip
          mkdir -p /opt/aws/bin
          wget -nv https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          pip3 install aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /usr/local/bin/cfn-* /opt/aws/bin
          wget -nv https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          yum install -y -q https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

          # Set variables for system install
          USER=ec2-user
          PROJECT_HOME=/home/$USER
          SETUP_DIR=$PROJECT_HOME/setup
          AWS_REGION=${AWS::Region}
          AWS_ACCOUNT_ID=${AWS::AccountId}
          EDITOR_IMAGE_URI=codercom/code-server
          EDITOR_IMAGE_TAG=3.11.0

          echo "Starting user data"

          # General tools
          yum install -y -q yum-utils git vim
          curl -SL https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -o /usr/bin/jq
          chmod +x /usr/bin/jq

          # Install AWS CLI
          echo "Installing AWS CLI"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -qq awscliv2.zip
          ./aws/install

          # Pull assets, config, and secrets from s3/sm
          mkdir -p $SETUP_DIR
          cd $SETUP_DIR
          /usr/local/aws-cli/v2/current/bin/aws --region $AWS_REGION s3 cp \
            s3://$CONFIG_BUCKET_NAME/editor/cloudwatch-agent-editor.json \
            $SETUP_DIR/cloudwatch-agent-editor.json

          # Docker + Docker-Compose
          echo "Installing Docker components"
          yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          yum install -y -q docker-ce docker-ce-cli containerd.io
          groupadd docker
          usermod -aG docker $USER
          systemctl enable docker
          systemctl start docker

          echo "Creating Editor Users"
          groupadd editor-users
          EDITOR_GID=$(tail -1 /etc/group | cut -d : -f3)
          PORT=80
          USERNAME=editor-user
          # Create user in editor-users group
          useradd -m -g editor-users -G docker $USERNAME
          EDITOR_UID=$(id -u $USERNAME)

          # Aerie Editor Config
          mkdir -p /home/$USERNAME/.aerie-editor-config/code-server
          mkdir /home/$USERNAME/.aerie-editor-data
          tee /home/$USERNAME/.aerie-editor-config/code-server/config.yaml << EOF
          auth: none
          bind-addr: 127.0.0.1:8080
          cert: false
          disable-telemetry: true
          disable-update-check: true
          extra-extensions-dir: ['/home/coder/extra-extensions']
          # username: $USERNAME
          EOF
          chown -R $USERNAME: /home/$USERNAME

          # Aerie Editor startup
          docker run --name aerie-editor-$USERNAME -d -p $PORT:8080 \
            -v /home/$USERNAME/.aerie-editor-data:/home/coder/.local/share/code-server \
            -v /home/$USERNAME/.aerie-editor-config:/home/coder/.config \
            -v /home/$USERNAME:/home/coder/project \
            -u $EDITOR_UID:$EDITOR_GID \
            $EDITOR_IMAGE_URI:$EDITOR_IMAGE_TAG;
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:$SETUP_DIR/cloudwatch-agent-editor.json
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Description: IAM Role to be used by the AIT Editor Servers
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: !If [RolePathProvided, !Ref RolePath, !Ref AWS::NoValue]
      PermissionsBoundary:
        !If [PermissionsBoundaryProvided, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${ConfigBucketName}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${ConfigBucketName}/*'
            Version: '2012-10-17'
          PolicyName: InstanceRoleDefaultPolicy

  InstanceOneInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

Outputs:
  InstanceId:
    Value: !Ref Instance
  InstancePrivateIp:
    Value: !GetAtt Instance.PrivateIp
  SecurityGroupId:
    Value: !GetAtt AitEditorSecurityGroup.GroupId
