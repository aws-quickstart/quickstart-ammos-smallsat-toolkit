AWSTemplateFormatVersion: "2010-09-09"
Description: (qs-1s6abjf4a)
Parameters:
  ProjectName:
    Description: Name of your project
    Type: String
  ConfigBucketName:
    Description: Name of the S3 bucket used to store project-specific configuration
      files.
    Type: String
  FQDN:
    Description: Fully Qualified Domain Name to use for project resources root.
    Type: String
  PrivateSubnetIds:
    Description: List of Private Subnet IDs for deploying the AIT Autoscaling Group
    Type: List<AWS::EC2::Subnet::Id>
  VPCID:
    Description: VPC ID for deploying project resources
    Type: AWS::EC2::VPC::Id
  InstanceType:
    Description: Instance type to be used for AIT Server instances; see deployment
      guide for recommendations
    Type: String
    Default: m5.large
  KeyPairName:
    Description: Name of created SSH Key for instance access - must use SSM sessions
      if no key supplied
    Type: AWS::EC2::KeyPair::KeyName
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a
      hyphen (-).
    Default: aws-quickstart
    Description: Name of the S3 bucket for your copy of the Quick Start assets.
      Keep the default name unless you are customizing the template.
      Changing the name updates code references to point to a new Quick
      Start location. This name can include numbers, lowercase letters,
      uppercase letters, and hyphens, but do not start or end with a hyphen (-).
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^([0-9a-zA-Z-.]+/)*$
    ConstraintDescription: The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/).
    Default: quickstart-nasa-jpl-cubs/
    Description: S3 key prefix that is used to simulate a directory for your copy of the
      Quick Start assets. Keep the default prefix unless you are customizing
      the template. Changing this prefix updates code references to point to
      a new Quick Start location. This prefix can include numbers, lowercase
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with a forward slash.
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html
      and https://aws-quickstart.github.io/option1.html.
    Type: String
  SessionTimeout:
    Description: The maximum duration of the authentication session, in seconds.
    Type: Number
    Default: 604800  # One day
    MinValue: 60
    MaxValue: 604800
  # TODO: Enforce AllowedValues
  RolePath:
    Description: Will be attached to all created IAM Roles to satisfy security requirements.
    Type: String
    Default: ''
  # TODO: Enforce AllowedValues
  PermissionsBoundaryArn:
    Description: Will be attached to all created IAM Roles to satisfy security requirements.
    Type: String
    Default: ''
  CognitoDomainName:
    Type: String
  ALBSecurityGroupID:
    Type: String
  CognitoClientID:
    Type: String
  CognitoClientSecret:
    Type: String
  CognitoProviderUrl:
    Type: String
  ALBHttpsListenerArn:
    Type: String
  ListenerCertificateArn:
    Type: String
  ALBArn:
    Type: String
Conditions:
  SshEnabled: !Not
    - !Equals
      - ''
      - !Ref 'KeyPairName'
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  IsGovCloud: !Not [!Equals ['aws', !Ref AWS::Partition]]
  RolePathProvided: !Not [!Equals ['', !Ref RolePath]]
  PermissionsBoundaryProvided: !Not [!Equals ['', !Ref PermissionsBoundaryArn]]
Mappings:
  AWSAMIRegionMap:
    us-east-1:
      RHELHA84HVM: ami-02e0bb36c61bb9715
    us-east-2:
      RHELHA84HVM: ami-0b2e47f3b2e23d235
    us-west-1:
      RHELHA84HVM: ami-054965c6cd7c6e462
    us-west-2:
      RHELHA84HVM: ami-0b28dfc7adc325ef4

Resources:
  AitServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security group to manage connections to ammos-ait-asg-deploy
        AIT Server
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroupID
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          SourceSecurityGroupId: !Ref ALBSecurityGroupID
  AitAutoScalingGroupInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'InstanceRole'
  AitAutoScalingGroupLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - InstanceRoleDefaultPolicy
      - InstanceRole
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName:
            - !Ref InstanceRole
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          default:
            - download_bootstrap_script
        install_aws_cli:
          commands:
            010_install_aws_cli: !Sub |
              mkdir -p /tmp/awscli
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscli/awscliv2.zip"
              cd /tmp/awscli
              unzip awscliv2.zip
              ./aws/install
        download_bootstrap_script:
          files:
            /tmp/ait_bootstrap.sh:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/ait_bootstrap.sh
                - S3Bucket: !If
                    - UsingDefaultBucket
                    - !Sub 'aws-quickstart-${AWS::Region}'
                    - !Ref 'QSS3BucketName'
                  S3Region: !If
                    - UsingDefaultBucket
                    - !Ref 'AWS::Region'
                    - !Ref 'QSS3BucketRegion'
              mode: '000550'
              owner: 'root'
              group: 'root'
              authentication: S3AccessCreds
          commands:
            010_copy_bootstrap:
              command: !Sub
                - aws cp s3://${S3Bucket}/${QSS3KeyPrefix}scripts/ait_bootstrap.sh /tmp/
                - S3Bucket: !If
                    - UsingDefaultBucket
                    - !Sub "${QSS3BucketName}-${AWS::Region}"
                    - !Ref QSS3BucketName
            020_run_bootstrap:
              command:
                - /tmp/ait_bootstrap.sh
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 64
      IamInstanceProfile: !Ref 'AitAutoScalingGroupInstanceProfile'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - RHELHA84HVM
      InstanceType: !Ref 'InstanceType'
      KeyName: !If
        - SshEnabled
        - !Ref 'KeyPairName'
        - !Ref 'AWS::NoValue'
      SecurityGroups:
        - !GetAtt 'AitServerSecurityGroup.GroupId'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export PATH=$PATH:/usr/local/bin
          yum install git -y || apt-get install -y git || zypper -n install git
          git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git /quickstart-linux-utilities
          cd /quickstart-linux-utilities
          source quickstart-cfn-tools.source
          $(qs_get-python-path) -m easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource AitAutoScalingGroupLaunchConfig --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AitAutoScalingGroup --region ${AWS::Region}
  AitWebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPCID
  AitMctTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8082
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPCID
  AitAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      LaunchConfigurationName: !Ref 'AitAutoScalingGroupLaunchConfig'
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: ammos-cubs-deploy/ammos-ait-asg-deploy/AitAutoScalingGroup
      TargetGroupARNs:
        - !Ref 'AitWebTargetGroup'
        - !Ref 'AitMctTargetGroup'
      VPCZoneIdentifier: !Ref 'PrivateSubnetIds'
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
  AitListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            ClientId: !Ref CognitoClientID
            ClientSecret: !Ref CognitoClientSecret
            Issuer: !Ref CognitoProviderUrl
            UserInfoEndpoint:
              Fn::Sub:
                - https://${CognitoDomainName}.${AuthSuffix}.${AWS::Region}.amazoncognito.com/oauth2/userInfo
                - AuthSuffix: !If [IsGovCloud, "auth-fips", "auth"]
            AuthorizationEndpoint:
              Fn::Sub:
                - https://${CognitoDomainName}.${AuthSuffix}.${AWS::Region}.amazoncognito.com/oauth2/authorize
                - AuthSuffix: !If [IsGovCloud, "auth-fips", "auth"]
            TokenEndpoint:
              Fn::Sub:
                - https://${CognitoDomainName}.${AuthSuffix}.${AWS::Region}.amazoncognito.com/oauth2/token
                - AuthSuffix: !If [IsGovCloud, "auth-fips", "auth"]
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            SessionTimeout: !Ref SessionTimeout
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref 'AitWebTargetGroup'
      Conditions:  # One day
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'ait.${FQDN}'
      ListenerArn: !Ref ALBHttpsListenerArn
      Priority: 75
  MctListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            ClientId: !Ref CognitoClientID
            ClientSecret: !Ref CognitoClientSecret
            Issuer: !Ref CognitoProviderUrl
            UserInfoEndpoint:
              Fn::Sub:
                - https://${CognitoDomainName}.${AuthSuffix}.${AWS::Region}.amazoncognito.com/oauth2/userInfo
                - AuthSuffix: !If [IsGovCloud, "auth-fips", "auth"]
            AuthorizationEndpoint:
              Fn::Sub:
                - https://${CognitoDomainName}.${AuthSuffix}.${AWS::Region}.amazoncognito.com/oauth2/authorize
                - AuthSuffix: !If [IsGovCloud, "auth-fips", "auth"]
            TokenEndpoint:
              Fn::Sub:
                - https://${CognitoDomainName}.${AuthSuffix}.${AWS::Region}.amazoncognito.com/oauth2/token
                - AuthSuffix: !If [IsGovCloud, "auth-fips", "auth"]
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            SessionTimeout: !Ref SessionTimeout
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref 'AitWebTargetGroup'
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'mct.${FQDN}'
      ListenerArn: !Ref ALBHttpsListenerArn
      Priority: 100
  AitMctIntListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref AitMctTargetGroup
                Weight: 1
      LoadBalancerArn: !Ref ALBArn
      Port: 8082
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ListenerCertificateArn
      SslPolicy: ELBSecurityPolicy-FS-1-2-2019-08
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Description: IAM Role to be used by the AIT Application Servers
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: !If [RolePathProvided, !Ref RolePath, !Ref AWS::NoValue]
      PermissionsBoundary:  !If [PermissionsBoundaryProvided, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
  InstanceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: cloudformation:SignalResource
            Effect: Allow
            Resource: !Ref 'AWS::StackId'
          - Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${ConfigBucketName}'
              - !Sub 'arn:${AWS::Partition}:s3:::${ConfigBucketName}/*'
          - Action:
              - 's3:GetObject'
              - s3:ListBucket
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            Effect: Allow
        Version: '2012-10-17'
      PolicyName: InstanceRoleDefaultPolicy
      Roles:
        - !Ref 'InstanceRole'
Outputs:
  GovCloudCondition:
    Value: !If [IsGovCloud, "yes", "no"]
  AitSecurityGroupId:
    Value: !GetAtt 'AitServerSecurityGroup.GroupId'
