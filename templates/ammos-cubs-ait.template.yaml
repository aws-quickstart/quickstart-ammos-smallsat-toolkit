Parameters:
  ProjectName:
    Description: Name of your project
    Type: String
  ConfigBucketName:
    Description: Name of the S3 bucket used to store project-specific configuration
      files.
    Type: String
  FQDN:
    Description: Fully Qualified Domain Name to use for project resources root.
    Type: String
  PrivateSubnetIds:
    Description: List of Private Subnet IDs for deploying the AIT Autoscaling Group
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC ID for deploying project resources
    Type: AWS::EC2::VPC::Id
  AMI:
    Description: AMI used for the AIT Server instances; must be RHEL 7/8 base
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Instance type to be used for AIT Server instances; see deployment
      guide for recommendations
    Type: String
  SshKeyName:
    Description: Name of created SSH Key for instance access - must use SSM sessions if no key supplied
    Type: String

Conditions:
  SshEnabled: !Not
    - !Equals
      - ''
      - !Ref 'SshKeyName'
Resources:
  AitServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage connections to ammos-ait-asg-deploy
        AIT Server
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${ProjectName}-AlbSecurityGroupId
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${ProjectName}-AlbSecurityGroupId
      VpcId: !Ref 'VpcId'
  AitAutoScalingGroupInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'InstanceRole'
  AitAutoScalingGroupLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - InstanceRoleDefaultPolicy
      - InstanceRole
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 64
      IamInstanceProfile: !Ref 'AitAutoScalingGroupInstanceProfile'
      ImageId: !Ref 'AMI'
      InstanceType: !Ref 'InstanceType'
      KeyName: !If
        - SshEnabled
        - !Ref 'SshKeyName'
        - !Ref 'AWS::NoValue'
      SecurityGroups:
        - !GetAtt 'AitServerSecurityGroup.GroupId'
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          function exitTrap(){
          exitCode=$?
          /opt/aws/bin/cfn-signal \
            --stack ${AWS::StackName} \
            --resource AitAutoScalingGroup \
            --region ${AWS::Region} -e $exitCode || echo 'Failed to send Cloudformation Signal'
          }
          trap exitTrap EXIT
          CONFIG_BUCKET_NAME=${ConfigBucketName}

          function boostrap_aws_stuff(){
            # rpms and stuff
            yum install -y -q python3 wget unzip
            wget -nv https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            wget -nv https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
            curl  "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip " -o  "awscliv2.zip"
            pip3 install aws-cfn-bootstrap-py3-latest.tar.gz

            # directories
            mkdir -p /opt/aws/bin
            ln -s /usr/local/bin/cfn-* /opt/aws/bin

            # Cloudwatch and SSM agent
            sudo rpm -U ./amazon-cloudwatch-agent.rpm
            yum install -y -q https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

            # AWS CLI
            unzip -qq awscliv2.zip
            ./aws/install > /dev/null && echo "Installed AWS CLI"
          }

          function bootstrap_ait(){
            # Install basic system tools needed for AIT Server
            # install python 3.7
            yum install -y @development gcc openssl-devel bzip2-devel libffi-devel sqlite-devel httpd mod_ssl vim
            cd /opt
            wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz
            tar xzf Python-3.7.9.tgz
            cd Python-3.7.9
            ./configure --enable-optimizations --enable-loadable-sqlite-extensions > /dev/null && echo "Configured Python 3.7"
            make altinstall > /dev/null && echo "Installed Python 3.7"

            systemctl enable httpd
            curl -SL https://github.com/stedolan/jq/relepermanently/deleteases/download/jq-1.5/jq-linux64  -o /usr/bin/jq
            chmod +x /usr/bin/jq
          }

          function install_ait_and_dependents(){
            # Set variables for system install
            PROJECT_HOME=/home/ec2-user
            SETUP_DIR=/home/ec2-user/setup
            USER=ec2-user
            GROUP=ec2-user
            AWS_REGION=${AWS::Region}
            python3.7 -m pip install virtualenv virtualenvwrapper
            cd $PROJECT_HOME

            # Prepare python environment for AIT work
            tee -a /root/.bashrc $PROJECT_HOME/.bashrc << EOM
          export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3.7
          export WORKON_HOME=$PROJECT_HOME/.virtualenvs
          export PROJECT_HOME=$PROJECT_HOME
          export CONFIG_BUCKET_NAME=$CONFIG_BUCKET_NAME
          source /usr/local/bin/virtualenvwrapper.sh
          EOM
            source /root/.bashrc


            tee -a > $PROJECT_HOME/.virtualenvs/postactivate << EOM
          if [ \$VIRTUAL_ENV ==  "$PROJECT_HOME/.virtualenvs/ait" ]; then
            export AIT_ROOT=$PROJECT_HOME/AIT-Core
            export AIT_CONFIG=$PROJECT_HOME/AIT-Core/config/config.yaml
          fi
          EOM

            mkvirtualenv ait
            workon ait

            # Pull assets, config, and secrets from s3/sm
            mkdir -p $SETUP_DIR
            /usr/local/aws-cli/v2/current/bin/aws --region $AWS_REGION s3 sync s3://$CONFIG_BUCKET_NAME/ait/ $SETUP_DIR/
            /usr/local/aws-cli/v2/current/bin/aws --region $AWS_REGION s3 cp s3://"$CONFIG_BUCKET_NAME"/modules/openmct-static.tgz - | tar -xz -C /var/www/html

            # Install open-source AIT components
            git clone https://github.com/NASA-AMMOS/AIT-Core.git $PROJECT_HOME/AIT-Core
            cd $PROJECT_HOME/AIT-Core/
            git checkout 2.3.5
            pip install .
            cp $SETUP_DIR/ait-example-config.yaml $PROJECT_HOME/AIT-Core/config/config.yaml
            mkdir -p $PROJECT_HOME/AIT-Core/config/tlm
            cp $PROJECT_HOME/AIT-Core/config/tlm.yaml $PROJECT_HOME/AIT-Core/config/tlm/tlm.yaml
            cp $PROJECT_HOME/AIT-Core/config/ccsds_header.yaml $PROJECT_HOME/AIT-Core/config/tlm/ccsds_header.yaml

            git clone https://github.com/NASA-AMMOS/AIT-GUI.git $PROJECT_HOME/AIT-GUI
            cd $PROJECT_HOME/AIT-GUI/
            git checkout 2.3.1
            pip install .

            # Copy necessary apache configs
            cp $SETUP_DIR/httpd_proxy.conf /etc/httpd/conf.d/proxy.conf

            # Install InfluxDB and data plugin
            curl https://repos.influxdata.com/rhel/6/amd64/stable/influxdb-1.2.4.x86_64.rpm -o $SETUP_DIR/influxdb-1.2.4.x86_64.rpm
            yum localinstall -y $SETUP_DIR/influxdb-1.2.4.x86_64.rpm

            pip install influxdb
            systemctl enable influxdb
            service influxdb start

            # Start AIT Server
            tee > /etc/systemd/system/ait-server.service << EOM
          [Unit]
          Description=AIT-Core Server
          #After=influxdb.service

          [Service]
          Type=simple
          User=root
          Environment=AIT_ROOT=$PROJECT_HOME/AIT-Core
          Environment=AIT_CONFIG=$PROJECT_HOME/AIT-Core/config/config.yaml
          ExecStart=/home/ec2-user/.virtualenvs/ait/bin/ait-server

          [Install]
          WantedBy=multi-user.target
          EOM
            systemctl enable ait-server.service
            systemctl start ait-server.service

            # change SELinux file context so that apache can read specific files (e.g certs)
            # semanage fcontext -a -t httpd_sys_content_t "/ammos(/.*)?"
            # restorecon -R -v /ammos

            # allow apache to make outbound connections
            # (for proxying requests to AIT server)
            # https://tinyurl.com/4ze56xyx
            setsebool -P httpd_can_network_connect 1
            # semanage boolean -m --on httpd_can_network_connect

            systemctl start httpd
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config -m ec2 -s -c file:$SETUP_DIR/cloudwatch-agent-ait.json

            # Give user ownership of all the things placed in project home during this setup script
            chown -R $USER $PROJECT_HOME
            chgrp -R $GROUP $PROJECT_HOME

            deactivate
          }

          boostrap_aws_stuff
          bootstrap_ait
          install_ait_and_dependents
  AitWebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref 'VpcId'
  AitMctTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8082
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref 'VpcId'
  AitAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      LaunchConfigurationName: !Ref 'AitAutoScalingGroupLaunchConfig'
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: ammos-cubs-deploy/ammos-ait-asg-deploy/AitAutoScalingGroup
      TargetGroupARNs:
        - !Ref 'AitWebTargetGroup'
        - !Ref 'AitMctTargetGroup'
      VPCZoneIdentifier: !Ref 'PrivateSubnetIds'
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
  AitListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'AitWebTargetGroup'
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'ait.${FQDN}'
      ListenerArn: !ImportValue
        Fn::Sub: ${ProjectName}-HttpsListenerArn
      Priority: 75
  MctListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'AitMctTargetGroup'
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'mct.${FQDN}'
      ListenerArn: !ImportValue
        Fn::Sub: ${ProjectName}-HttpsListenerArn
      Priority: 100
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Description: IAM Role to be used by the AIT Application Servers
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /am-ec2/
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM'
  InstanceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: cloudformation:SignalResource
            Effect: Allow
            Resource: !Ref 'AWS::StackId'
          - Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${ConfigBucketName}'
              - !Sub 'arn:${AWS::Partition}:s3:::${ConfigBucketName}/*'
        Version: '2012-10-17'
      PolicyName: InstanceRoleDefaultPolicy
      Roles:
        - !Ref 'InstanceRole'
Outputs:
  AitSecurityGroupId:
    Value: !GetAtt 'AitServerSecurityGroup.GroupId'
